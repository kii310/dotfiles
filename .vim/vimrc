" ファイルを上書きする前にバックアップを作ることを無効化
set nowritebackup
set nobackup

" wildmenuオプションを有効(vimバーからファイルを選択できる)
set wildmenu

colorscheme molokai

set termguicolors

"----------------------------------------
" 検索
"----------------------------------------
" 検索するときに大文字小文字を区別しない
set ignorecase

" 小文字で検索すると大文字と小文字を無視して検索
set smartcase

" 検索がファイル末尾まで進んだら、ファイル先頭から再び検索
set wrapscan

" インクリメンタル検索 (検索ワードの最初の文字を入力した時点で検索が開始)
set incsearch

" 検索結果をハイライト表示
set hlsearch

" Vimの「%」を拡張する
source $VIMRUNTIME/macros/matchit.vim

"----------------------------------------
" 表示設定
"----------------------------------------
" 対応する括弧やブレースを表示
set showmatch matchtime=1

" メッセージ表示欄を2行確保
set cmdheight=2

" ステータス行を常に表示
set laststatus=2

" ウィンドウの右下にまだ実行していない入力中のコマンドを表示
set showcmd

" 省略されずに表示
set display=lastline

" 行末のスペースを可視化
set listchars=tab:^\ ,trail:~

" タイトルを表示
set title

" シンタックスハイライト
syntax on

" スペルチェック
"set spell

" 行番号の表示
set number

" 行番号の色
" 淡紅藤
highlight LineNr ctermfg=170 ctermbg=gray guifg=#e6cde3 guibg=black 

" 背景色
highlight Normal ctermbg=16 guibg=Black

" ヤンクでクリップボードにコピー
set clipboard=unnamed,autoselect

" カーソルラインの表示
set cursorline

" 行番号の隣
" サイン列
highlight SignColumn ctermbg=black guibg=Black

" カーソルラインの色
" 褐返
" 翡翠色
highlight CursorLine guibg=#203744 ctermbg=gray
highlight CursorLineNr guibg=#203744 ctermbg=gray guifg=#38b48b ctermfg=green
highlight CursorLineSign guibg=#203744

" 選択範囲
highlight Visual guibg=#203744

" 分割
highlight VertSplit guifg=black ctermfg=black

" 分割文字
set fillchars=vert:\ 

" バッファー以下の空白の行
set fillchars=eob:\ 
" default = ~

" スワップファイルを作成しない
set noswapfile

"-------------------------------------
" タブ & インデント
"------------------------------------
" タブの代わりに空白文字を挿入する
set expandtab

" タブ文字の表示幅
set tabstop=4

" Vimが挿入するインデントの幅
set shiftwidth=2

" 行頭の余白内で Tab を打ち込むと、'shiftwidth' の数だけインデントする
set smarttab

" 改行時に前の行のインデントを継続する
set autoindent

" 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set smartindent


" statusline
set statusline=%F\ %M\ %l/%L

" 青緑
highlight StatusLine guifg=black guibg=#00a497 ctermfg=black ctermbg=blue
highlight StatusLineNC guifg=black guibg=#00a497 ctermfg=black ctermbg=blue


" netrw setting
filetype plugin on

" ヘッダを表示しない
let g:netrw_banner=0

" サイズを(K,M,G)で表示する
let g:netrw_sizestyle="H"

" 日付フォーマットを yyyy/mm/dd(曜日) hh:mm:ss で表示する
let g:netrw_timefmt="%Y/%m/%d(%a) %H:%M:%S"

" プレビューウィンドウを垂直分割で表示する
let g:netrw_preview=1

" 左右分割を右側に開く
let g:netrw_altv=1

" 表示形式をTreeViewに変更
let g:netrw_liststyle = 3

" 特殊ファイルのハイライト
let g:netrw_special_syntax = 1


" plugins

call plug#begin()

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'airblade/vim-gitgutter'

Plug 'dense-analysis/ale'

Plug 'pantharshit00/vim-prisma'

" markdown viewer
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }

" post install (yarn install | npm install) then load plugin only for editing supported files
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install --frozen-lockfile --production',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'] }

call plug#end()


" 150ms で変更の反映
set updatetime=150

" 記号の色を変更する
" 緑
" 瑠璃色
" 濃紅
highlight GitGutterAdd ctermfg=green guifg=#3eb370
highlight GitGutterChange ctermfg=blue guifg=#1e50a2
highlight GitGutterDelete ctermfg=red guifg=#a22041

let g:gitgutter_sign_added='増'
let g:gitgutter_sign_modified='変'
let g:gitgutter_sign_removed='減'
let g:gitgutter_sign_removed_first_line='減'
let g:gitgutter_sign_removed_above_and_below='減'
let g:gitgutter_sign_modified_removed='変'

" coc.nvim
""" <Tab>で候補をナビゲート
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
""" <Tab>で次、<Shift+Tab>で前
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"


" カスタム関数の定義
" function! HighlightCursorGroupForGitGutter()
"   " カーソル位置のハイライトグループ名を取得
"   let l:syntaxID = synID(line('.'), col('.'), 1)
"   let l:syntaxName = synIDattr(l:syntaxID, 'name')
" 
"   " 必要に応じて、特定のハイライトグループに対する処理を行う
"   if l:syntaxName == 'GitGutterAdd'
"     " ここでハイライトを設定します
"     highlight GitGutterAdd ctermbg=gray guibg=#20374
"   " else
"     " そうでない場合の処理を行う（例えば、元の状態に戻す）
"     " highlight clear
"   endif
" endfunction

" CursorHoldイベントに関数をバインド
" autocmd CursorHold * call HighlightCursorGroupForGitGutter()

" highlight default link CursorLineSign GitGutterAdd
